/* Auto-generated by genmsg_cpp for file /home/tim/Desktop/Kinect-Based-Sound-Localization/KBSL/srv/FindInliersSrv.srv */
#ifndef KBSL_SERVICE_FINDINLIERSSRV_H
#define KBSL_SERVICE_FINDINLIERSSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point32.h"


#include "geometry_msgs/Point32.h"

namespace KBSL
{
template <class ContainerAllocator>
struct FindInliersSrvRequest_ {
  typedef FindInliersSrvRequest_<ContainerAllocator> Type;

  FindInliersSrvRequest_()
  : P()
  , P0()
  , n()
  , epsilon(0.0)
  {
  }

  FindInliersSrvRequest_(const ContainerAllocator& _alloc)
  : P(_alloc)
  , P0(_alloc)
  , n(_alloc)
  , epsilon(0.0)
  {
  }

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _P_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  P;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _P0_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  P0;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _n_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  n;

  typedef float _epsilon_type;
  float epsilon;


  typedef boost::shared_ptr< ::KBSL::FindInliersSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::KBSL::FindInliersSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct FindInliersSrvRequest
typedef  ::KBSL::FindInliersSrvRequest_<std::allocator<void> > FindInliersSrvRequest;

typedef boost::shared_ptr< ::KBSL::FindInliersSrvRequest> FindInliersSrvRequestPtr;
typedef boost::shared_ptr< ::KBSL::FindInliersSrvRequest const> FindInliersSrvRequestConstPtr;



template <class ContainerAllocator>
struct FindInliersSrvResponse_ {
  typedef FindInliersSrvResponse_<ContainerAllocator> Type;

  FindInliersSrvResponse_()
  : P()
  {
  }

  FindInliersSrvResponse_(const ContainerAllocator& _alloc)
  : P(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _P_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  P;


  typedef boost::shared_ptr< ::KBSL::FindInliersSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::KBSL::FindInliersSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct FindInliersSrvResponse
typedef  ::KBSL::FindInliersSrvResponse_<std::allocator<void> > FindInliersSrvResponse;

typedef boost::shared_ptr< ::KBSL::FindInliersSrvResponse> FindInliersSrvResponsePtr;
typedef boost::shared_ptr< ::KBSL::FindInliersSrvResponse const> FindInliersSrvResponseConstPtr;


struct FindInliersSrv
{

typedef FindInliersSrvRequest Request;
typedef FindInliersSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FindInliersSrv
} // namespace KBSL

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::KBSL::FindInliersSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::KBSL::FindInliersSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::KBSL::FindInliersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "44fc3e1e872bc8ae49d758452eac24ec";
  }

  static const char* value(const  ::KBSL::FindInliersSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x44fc3e1e872bc8aeULL;
  static const uint64_t static_value2 = 0x49d758452eac24ecULL;
};

template<class ContainerAllocator>
struct DataType< ::KBSL::FindInliersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KBSL/FindInliersSrvRequest";
  }

  static const char* value(const  ::KBSL::FindInliersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::KBSL::FindInliersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point32[] P\n\
geometry_msgs/Point32 P0\n\
geometry_msgs/Point32 n\n\
float32 epsilon\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::KBSL::FindInliersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::KBSL::FindInliersSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::KBSL::FindInliersSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::KBSL::FindInliersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a50f259239b279a44076645ba45c7569";
  }

  static const char* value(const  ::KBSL::FindInliersSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa50f259239b279a4ULL;
  static const uint64_t static_value2 = 0x4076645ba45c7569ULL;
};

template<class ContainerAllocator>
struct DataType< ::KBSL::FindInliersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KBSL/FindInliersSrvResponse";
  }

  static const char* value(const  ::KBSL::FindInliersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::KBSL::FindInliersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point32[] P\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::KBSL::FindInliersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::KBSL::FindInliersSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.P);
    stream.next(m.P0);
    stream.next(m.n);
    stream.next(m.epsilon);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct FindInliersSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::KBSL::FindInliersSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.P);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct FindInliersSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<KBSL::FindInliersSrv> {
  static const char* value() 
  {
    return "fcedaa1fba47f5b21446e97098d7d060";
  }

  static const char* value(const KBSL::FindInliersSrv&) { return value(); } 
};

template<>
struct DataType<KBSL::FindInliersSrv> {
  static const char* value() 
  {
    return "KBSL/FindInliersSrv";
  }

  static const char* value(const KBSL::FindInliersSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<KBSL::FindInliersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fcedaa1fba47f5b21446e97098d7d060";
  }

  static const char* value(const KBSL::FindInliersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<KBSL::FindInliersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KBSL/FindInliersSrv";
  }

  static const char* value(const KBSL::FindInliersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<KBSL::FindInliersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fcedaa1fba47f5b21446e97098d7d060";
  }

  static const char* value(const KBSL::FindInliersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<KBSL::FindInliersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KBSL/FindInliersSrv";
  }

  static const char* value(const KBSL::FindInliersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // KBSL_SERVICE_FINDINLIERSSRV_H

